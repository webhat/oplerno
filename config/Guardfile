notification :tmux, display_message: true
#notification :growl, display_message: true

watch ('config/Guardfile') { UI.info 'Exiting guard because config changed'; exit 0 }

guard 'coffeescript', output: 'public/javascripts/compiled', input: 'app/assets/javascripts', hide_success: true do
  watch(%r{app/assets/javascripts/(.*)\.(js\.coffee|coffee)/})
end

guard 'coffeescript', output: 'spec/javascripts/compiled', input: 'spec/javascripts', hide_success: true do
  watch(%r{spec/javascripts/.+_spec\.(js\.coffee|coffee)$/})
end

group :js do
  guard :jasmine, port: 8888, all_on_start: false, coverage: true do
    watch(%r{spec/javascripts/spec\.(js\.coffee|js|coffee)$}) { 'spec/javascripts' }
    watch(%r{spec/javascripts/.+_spec\.(js\.coffee|js|coffee)$})
    watch(%r{spec/javascripts/fixtures/.+$})
    watch(%r{app/assets/javascripts/(.+?)\.(js\.coffee|js|coffee)(?:\.\w+)*$}) { |m| "spec/javascripts/#{ m[1] }_spec.#{ m[2] }" }
  end
end

group :red_green_refactor, halt_on_fail: true do
  guard :rspec, cmd: 'bundle exec rspec' do
    watch(%r{^spec/.+_spec\.rb$})
    watch(%r{^lib/(.+)\.rb$}) { |m| "spec/lib/#{m[1]}_spec.rb" }
    watch('spec/spec_helper.rb') { "spec" }

    # Rails example
    watch(%r{^app/observers/(.+)\.rb$}) { |m| ["spec/observers/#{m[1]}_spec.rb"] }
    watch(%r{^app/(.+)\.rb$}) { |m| "spec/#{m[1]}_spec.rb" }
    watch(%r{^app/(.*)(\.erb|\.haml|\.slim)$}) { |m| "spec/#{m[1]}#{m[2]}_spec.rb" }
    watch(%r{^app/controllers/(.+)_(controller)\.rb$}) { |m| ["spec/routing/#{m[1]}_routing_spec.rb", "spec/#{m[2]}s/#{m[1]}_#{m[2]}_spec.rb", "spec/acceptance/#{m[1]}_spec.rb"] }
    watch(%r{^spec/factories/(.+)\.rb$}) { |m| ["spec/models/", "spec/controllers/#{m[1]}_controller_spec.rb"] }
    watch(%r{^app/models/(.+)\.rb$}) { |m| ["spec/models/#{m[1]}_spec.rb", "spec/controllers/#{m[1]}s_controller_spec.rb"] }
    watch(%r{^spec/support/(.+)\.rb$}) { "spec" }
    watch('config/routes.rb') { "spec/routing" }
    watch('app/controllers/application_controller.rb') { "spec/controllers" }

    # Capybara features specs
    watch(%r{^app/views/(.+)/.*\.(erb|haml|slim)$}) { |m| "spec/features/#{m[1]}_spec.rb" }

    # Turnip features and steps
    watch(%r{^spec/acceptance/(.+)\.feature$})
    watch(%r{^spec/acceptance/steps/(.+)_steps\.rb$}) { |m| Dir[File.join("**/#{m[1]}.feature")][0] || 'spec/acceptance' }
  end

  guard :rubocop, all_on_start: false do
    watch(%r{.+\.rb$}) { |m| m[0] }
    watch(%r{(?:.+/)?\.rubocop\.yml$}) { |m| File.dirname(m[0]) }
  end

  #guard 'brakeman', run_on_start: false, quiet: true do
  #  watch(%r{^app/.+\.(erb|haml|rhtml|rb)$})
  #  watch(%r{^config/.+\.rb$})
  #  watch(%r{^lib/.+\.rb$})
  #  watch('Gemfile')
  #end

  #guard :yard, stdout: 'log/yard.log', stderr: 'log/yard_error.log' do
  #  watch(%r{app/.+\.rb})
  #  watch(%r{lib/.+\.rb})
  #  watch(%r{ext/.+\.c})
  #end
end


guard 'cucumber', :all_on_start => false do
  watch(%r{^features/.+\.feature$})
  watch(%r{^features/support/.+$}) { 'features' }
  watch(%r{^features/step_definitions/(.+)_steps\.rb$}) { |m| Dir[File.join("**/#{m[1]}.feature")][0] || 'features' }
end


